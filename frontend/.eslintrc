{
  "parser": "@typescript-eslint/parser",
  "env": {
    "browser": true,
    "node": true
  },
  // tell the TypeScript parser that we want to use JSX syntax
  "parserOptions": {
    "tsx": true,
    "jsx": true,
    "js": true,
    "useJSXTextNode": true,
    "project": "./tsconfig.json",
    "tsconfigRootDir": "."
  },
  // includes the typescript specific rules found here: https://github.com/typescript-eslint/typescript-eslint/tree/master/packages/eslint-plugin#supported-rules
  "plugins": [
    "@typescript-eslint",
    "react-hooks",
    "eslint-plugin-react-hooks",
    "import",
    "no-relative-import-paths",
    "prettier"
  ],
  "extends": [
    "eslint:recommended",
    "plugin:react/recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:prettier/recommended",
    "prettier"
  ],
  "globals": {
    "window": "readonly",
    "describe": "readonly",
    "test": "readonly",
    "expect": "readonly",
    "it": "readonly",
    "process": "readonly",
    "document": "readonly"
  },
  "settings": {
    "react": {
      "version": "detect"
    },
    "import/parsers": {
      "@typescript-eslint/parser": [".ts", ".tsx"]
    },
    "import/resolver": {
      "typescript": {
        "project": "."
      }
    }
  },
  "rules": {
    "arrow-body-style": "error",
    "curly": "error",
    "camelcase": "warn",
    "no-else-return": "error",
    "eqeqeq": ["error", "always", { "null": "ignore" }],
    "no-restricted-imports": [
      "error",
      {
        "patterns": [
          {
            "group": ["~/api/**"],
            "message": "Read from '~/api' instead."
          },
          {
            "group": ["~/components/table/**", "!~/components/table/useTableColumnSort"],
            "message": "Read from '~/components/table' instead."
          },
          {
            "group": ["~/concepts/area/**"],
            "message": "Read from '~/concepts/area' instead."
          },
          {
            "group": ["~/components/table/useTableColumnSort"],
            "message": "The data will be sorted in the table, don't use this hook outside of '~/components/table' repo. For more information, please check the props of the Table component."
          }
        ]
      }
    ],
    "no-console": "error",
    "no-param-reassign": "error",
    "@typescript-eslint/explicit-function-return-type": "off",
    "@typescript-eslint/interface-name-prefix": "off",
    "@typescript-eslint/no-var-requires": "off",
    "@typescript-eslint/no-empty-function": "error",
    "@typescript-eslint/no-inferrable-types": "error",
    "@typescript-eslint/no-unused-vars": "error",
    "react-hooks/exhaustive-deps": "error",
    "react-hooks/rules-of-hooks": "error",
    "import/extensions": "off",
    "import/no-unresolved": "off",
    "import/order": [
      "error",
      {
        "pathGroups": [
          {
            "pattern": "~/**",
            "group": "external",
            "position": "after"
          }
        ],
        "pathGroupsExcludedImportTypes": ["builtin"],
        "groups": [
          "builtin",
          "external",
          "internal",
          "index",
          "sibling",
          "parent",
          "object",
          "unknown"
        ]
      }
    ],
    "no-relative-import-paths/no-relative-import-paths": [
      "warn",
      {
        "allowSameFolder": true,
        "rootDir": "src",
        "prefix": "~"
      }
    ],
    "prettier/prettier": [
      "error",
      {
        "arrowParens": "always",
        "singleQuote": true,
        "trailingComma": "all",
        "printWidth": 100
      }
    ],
    "react/prop-types": "off"
  },
  "overrides": [
    {
      "files": ["./src/api/**"],
      "rules": {
        "no-restricted-imports": [
          "off",
          {
            "patterns": ["~/api/**"]
          }
        ]
      }
    }
  ]
}
